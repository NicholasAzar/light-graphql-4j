<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Components on Light Java GraphQL - A GraphQL framework built on top of Light-Java</title>
    <link>https://networknt.github.io/light-java-graphql/components/index.xml</link>
    <description>Recent content in Components on Light Java GraphQL - A GraphQL framework built on top of Light-Java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Mon, 27 Mar 2017 14:25:32 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java-graphql/components/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GraphQL Validator</title>
      <link>https://networknt.github.io/light-java-graphql/components/graphql-validator/</link>
      <pubDate>Mon, 27 Mar 2017 14:25:32 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java-graphql/components/graphql-validator/</guid>
      <description>&lt;p&gt;Basic request validation for the graphql path and methods. It is the first line of
validation right after graphql-security and it doesn&amp;rsquo;t have any knowledge about the
graphql query parameter and body. Other schema based validation will be done at
GraphQL level.&lt;/p&gt;

&lt;p&gt;It shares the same configuration file with swagger-validator and here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Validate request/response for GraphQL request
---
enabled: true
enableResponseValidator: false

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GraphQL Security</title>
      <link>https://networknt.github.io/light-java-graphql/components/graphql-security/</link>
      <pubDate>Mon, 27 Mar 2017 14:25:26 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java-graphql/components/graphql-security/</guid>
      <description>&lt;p&gt;This module is very similar with swagger-security but as there is swagger specification
we cannot verify scopes against specification. GraphQL recommend authorization outside
of schema so that we can only verify query scope and mutation scope for read and write
access.&lt;/p&gt;

&lt;p&gt;This is the handler that should be put before graphql-validator. There is no need to
do any validation if JWT token does not exist in the request header.&lt;/p&gt;

&lt;p&gt;The module share the same security.yml and here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Security configuration in light framework.
---
# Enable JWT verification flag.
enableVerifyJwt: true

# Enable JWT scope verification. Only valid when enableVerifyJwt is true.
enableVerifyScope: true

# User for test only. should be always be false on official environment.
enableMockJwt: false

# JWT signature public certificates. kid and certificate path mappings.
jwt:
  certificate:
    &#39;100&#39;: oauth/primary.crt
    &#39;101&#39;: oauth/secondary.crt
  clockSkewInSeconds: 60

# Enable or disable JWT token logging
logJwtToken: true

# Enable or disable client_id, user_id and scope logging.
logClientUserScope: false

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GraphQL Router</title>
      <link>https://networknt.github.io/light-java-graphql/components/graphql-router/</link>
      <pubDate>Mon, 27 Mar 2017 14:25:17 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java-graphql/components/graphql-router/</guid>
      <description>&lt;p&gt;This module provides RouteHandler and SchemaProvider interfaces and implement both GET and
POST handlers for GraphQL.&lt;/p&gt;

&lt;p&gt;The router is a HandlerProvider and it needs to be put into file
/src/main/resources/META-INF/services/com.networknt.server.HandlerProvider
in your GraphQL API/service.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/networknt/light-java-example/blob/master/graphql/mutation/src/main/resources/META-INF/services/com.networknt.server.HandlerProvider&#34;&gt;link&lt;/a&gt;
is an example.&lt;/p&gt;

&lt;p&gt;The user developed schema needs to be hooked to the GraphqlPostHandler in this module through
SchemaProvider interface. The SPI config file should be located at
/src/main/resources/META-INF/services/com.networknt.graphql.router.SchemaProvider&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/networknt/light-java-example/blob/master/graphql/mutation/src/main/resources/META-INF/services/com.networknt.graphql.router.SchemaProvider&#34;&gt;link&lt;/a&gt;
is an example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GraphQL Common</title>
      <link>https://networknt.github.io/light-java-graphql/components/graphql-common/</link>
      <pubDate>Mon, 27 Mar 2017 14:25:02 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java-graphql/components/graphql-common/</guid>
      <description>&lt;p&gt;This module controls the configuration for GraphQL service and share some static variables
with other modules to make the dependencies much simpler.&lt;/p&gt;

&lt;p&gt;Here is an example of graphql.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# GraphQL configuration
---
# The path of GraphQL endpoint for both GET and POST
path: /graphql

# Enable GraphiQL for development environment only. It will allow you to test from your Browser.
enableGraphiQL: true

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Light Java GraphQL Components</title>
      <link>https://networknt.github.io/light-java-graphql/components/</link>
      <pubDate>Mon, 27 Mar 2017 14:22:04 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java-graphql/components/</guid>
      <description>

&lt;h2 id=&#34;common-components&#34;&gt;Common Components&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java-graphql/components/graphql-common/&#34;&gt;graphql-common&lt;/a&gt;
contains common utilities and static variables that are shared by other components.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java-graphql/components/graphql-router/&#34;&gt;graphql-router&lt;/a&gt;
is responsible for handling GraphQL and GraphiQL requests and hooks schema provider.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;middleware-handlers&#34;&gt;Middleware Handlers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java-graphql/components/graphql-security/&#34;&gt;graphql-security&lt;/a&gt;
verifies JWT token in request header and verifies scopes if it is enabled.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java-graphql/components/graphql-validator/&#34;&gt;graphql-validator&lt;/a&gt;
validates the path and methods of the request. Other schema validation will be handled by the
GraphQL componnent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>